#!/usr/bin/env python 
import subprocess
from pydbus import SystemBus
import locale
from shutil import which
import sys
import configparser
import argparse
import os

# Define the default config file path
DEFAULT_CONFIG_PATH = "~/.config/bluetoothmanager-dmenu/config.ini"

ENV = os.environ.copy()
ENC = locale.getpreferredencoding()
CONFIG = configparser.ConfigParser()

BUS = SystemBus()
OBJECT_MANAGER = BUS.get("org.bluez", "/")
ADAPTER = None
DEVICE = None


class Action:
    def __init__(self, name, function=None, args=None):
        self.name = name
        self.function = function
        self.args = args
    
    def __str__(self):
        return self.name

    def __call__(self):
        if self.function is None:
            return

        if self.args is None:
            self.function()
        else:
            self.function(*self.args)
    




def create_dmenu_command(prompt):
    global CONFIG

    dmenu_program = CONFIG.get("dmenu", "command", fallback="walker")
    commands = [dmenu_program]

    extended_arguments = CONFIG.get("dmenu", "arguments", fallback="-n -d -k").split(" ")
    if len(extended_arguments) > 0:
        commands.extend(extended_arguments)

    prompt = str(prompt)
    if len(prompt) == 0:
        prompt = " "

    config_prompt = CONFIG.get("dmenu", "prompt", fallback='-p')
    commands.append(str(config_prompt))
    commands.append(str(prompt))
    return commands


def run_command(prompt, input):
    selection = subprocess.run(create_dmenu_command(prompt),
                        capture_output=True,
                        check=False,
                        input=input,
                        env=ENV,
                        encoding=ENC).stdout
    return selection.strip("\n")


def get_spacing(character):
    # 60 seems to be context dependent
    if sys.getsizeof(character) > 42:
        return "   "
    return " "


def fmt_device(device):
    global CONFIG
    connected_symbol = CONFIG.get("dmenu", "connected_symbol", fallback="")
    battery_symbol = CONFIG.get("dmenu", "battery_symbol", fallback="󰥈")

    name = device["device"].get("Alias")

    connected_ind = ""
    if device["device"].get("Connected", False):
        connected_ind = f"{connected_symbol}{get_spacing(connected_symbol)}"
    battery_lvl = ""
    if device["battery"] is not None:
        percentage = device["battery"].get("Percentage")
        battery_lvl = f"\t({battery_symbol}{get_spacing(battery_symbol)}{percentage}%)"

    return f"{connected_ind}{name}{battery_lvl}"


def notify_send(title, text=""):
    subprocess.run(["notify-send", "-i", "bluetooth", "-c", "bluetooth", title, text], capture_output=False, check=False, env=ENV, encoding=ENC)


def toggle_connection(name):
    global DEVICE
    if DEVICE.Connected:
        DEVICE.Disconnect()
        return
    
    try: 
        DEVICE.Connect()
    except: 
        notify_send(name, "Failed to connect")


def remove_device(name, device_path):
    global ADAPTER
    
    try:
        ADAPTER.RemoveDevice(device_path)
    except:
        notify_send(f"Failed to remove device {name}")


def is_installed(command):
    return which(command) is not None


def show_device_menu(device_path):
    global DEVICE, ADAPTER
    DEVICE = BUS.get("org.bluez", device_path)
    name = DEVICE.Alias if DEVICE.Alias is not None else DEVICE.Address
    connected = f"Connected: {'yes' if DEVICE.Connected else 'no'}"
    trusted = f"Trusted: {'yes' if DEVICE.Trusted else 'no'}"

    dmenu_input = f"{connected}\n{trusted}\n\nRemove\nBack\n"
    selection = run_command(name, dmenu_input)

    # just stay in the main loop
    if selection == "Back":
        return

    if selection == connected:
        toggle_connection(name)
    elif selection == trusted:
        DEVICE.Trusted = not DEVICE.Trusted
        notify_send(f"Bluetooth Device Trusted" if DEVICE.Trusted else f"Bluetooth Device Untrusted", name)
    elif selection == "Remove":
        remove_device(name, device_path)


def get_devices(only_discovered=False):
    """Returns a list of connected Bluetooth devices for the given ADAPTER."""
    global OBJECT_MANAGER, ADAPTER
    managed_objects = OBJECT_MANAGER.GetManagedObjects()

    connected_devices = {}
    
    # Loop through all managed objects and filter by device interface
    for path, interfaces in managed_objects.items():
        if not path.startswith(ADAPTER._path):
            continue
        
        if "org.bluez.Device1" not in interfaces:
            continue
    
        device = interfaces["org.bluez.Device1"]

        if not only_discovered and not device.get("Paired", False):
            continue
        
        if only_discovered and device.get("Paired", False):
            continue

        address = device.get("Address").replace(":", "-")
        alias = device.get("Alias", address)

        if alias == address:
            continue

        battery = None
        if "org.bluez.Battery1" in interfaces:
            battery = interfaces["org.bluez.Battery1"]


        connected_devices[alias] = {
            "path": path,
            "device": device,
            "battery": battery
        }

    return connected_devices


def get_bluetooth_adapters():
    """Gets available Bluetooth adapters."""
    global OBJECT_MANAGER
    managed_objects = OBJECT_MANAGER.GetManagedObjects()

    adapters = {}
    for path, interfaces in managed_objects.items():
        if "org.bluez.Adapter1" in interfaces:
            ADAPTER = interfaces["org.bluez.Adapter1"]
            name = ADAPTER.get("Name", ADAPTER.get("Address"))
            adapters[name] = path
    return adapters


def choose_adapter(adapters):
    """Uses dmenu to choose an ADAPTER if there are multiple options."""
    if len(adapters) == 1:
        return next(iter(adapters.values()))

    # Use dmenu to prompt for the user's choice
    selection = run_command("Choose bluetooth ADAPTER", "\n".join(adapters.keys()))
    return adapters.get(selection, None)


def scan():
    global ADAPTER, BUS
    try:
        ADAPTER.StartDiscovery()
    except:
        notify_send("Device scan failed")
        return
    discovered_devices = {}
    standard_options = "Keep Searching\nAbort\n\n"
    while True:
        discovered_devices.update(get_devices(only_discovered=True))
        content = f"\tFound {len(discovered_devices.keys())} device(s)\n" 
        content += standard_options
        selection = subprocess.run(create_dmenu_command("Discovering bluetooth devices..."),
                capture_output=True,
                check=False,
                input=content + "\n".join(discovered_devices.keys()),
                env=ENV,
                encoding=ENC).stdout
        selection = selection.strip("\n")
        if selection == "Keep Searching":
            continue;
        if selection.startswith("\tFound "):
            continue
        break;

    ADAPTER.StopDiscovery()
    if selection == "Abort" or len(selection) == 0:
        return
    try:
        to_pair = BUS.get("org.bluez", discovered_devices[selection]["path"])
        to_pair.Pair()
    except:
        notify_send("Pairing device failed", discovered_devices[selection]["device"].get("Alias"))


def launch_gui():
    global CONFIG

    app = CONFIG.get("manager", "app", fallback="blueman-manager")
    gui = CONFIG.getboolean("manager", "gui", fallback=True)

    terminal = CONFIG.get("manager", "terminal", fallback="kitty")

    if not gui and not is_installed(terminal):
        notify_send(f"{terminal} not found")
        sys.exit(-1)
    

    if not is_installed(app):
        notify_send(f"{app} not installed")
        sys.exit(-1)

    cmd = []
    if not gui:
        cmd.append(terminal)
        cmd.append("-e")
    cmd.append(app)
    subprocess.run(cmd, check=False)
    sys.exit()

def toggle_power():
    global ADAPTER
    ADAPTER.Powered = not ADAPTER.Powered
    notify_send(f"{'Enabled' if ADAPTER.Powered else 'Disabled'} ADAPTER {ADAPTER.Alias}", "")
    sys.exit()


def run():
    global ADAPTER, DEVICE, BUS, CONFIG
    adapters = get_bluetooth_adapters()

    if not adapters:
        notify_send("No bluetooth adapters found")
        return

    # Select an ADAPTER using dmenu if there are multiple options
    adapter_path = choose_adapter(adapters)
    if not adapter_path:
        return
    
    ADAPTER = BUS.get('org.bluez', adapter_path)
    # lmain loop
    while True:

        paired_devices = get_devices() 

        options = [
            Action(fmt_device(device), show_device_menu, [device["path"]]) for name, device in paired_devices.items()
        ]
        options.append(Action(""))
        options.append(Action("Scan", scan))
        options.append(Action(f"{'Disable' if ADAPTER.Powered else 'Enable'} Bluetooth", toggle_power))

        display_gui = CONFIG.getboolean("manager", "enabled", fallback=False)
        if display_gui: 
            options.append(Action("Launch Bluetooth Manager", launch_gui))

        options.append(Action(""))
        options.append(Action("Exit", sys.exit))

        dmenu_input = "\n".join(str(option) for option in options)
        selection = run_command("", dmenu_input)
        if len(selection) == 0:
            sys.exit()
        selected = [action for action in options if str(action) == selection]
        if len(selected) == 0:
            continue
        selected[0]()        
        DEVICE = None


def create_parser():
    parser = argparse.ArgumentParser(description="Bluetooth Manager Dmenu")
    
    # Add the optional --config or -c argument
    parser.add_argument(
        '--config', '-c',
        type=str,
        default=DEFAULT_CONFIG_PATH,  # Default path if not provided
        help=f'Path to config file (default: {DEFAULT_CONFIG_PATH})'
    )
    
    return parser


def main():
    global CONFIG
    parser = create_parser()
    args = parser.parse_args()
    CONFIG.read(os.path.expanduser(args.config))
    run()


if __name__ == "__main__":
    main()




